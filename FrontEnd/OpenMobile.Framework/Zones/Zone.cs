/*********************************************************************************
    This file is part of Open Mobile.

    Open Mobile is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Open Mobile is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Open Mobile.  If not, see <http://www.gnu.org/licenses/>.
 
    There is one additional restriction when using this framework regardless of modifications to it.
    The About Panel or its contents must be easily accessible by the end users.
    This is to ensure all project contributors are given due credit not only in the source code.
*********************************************************************************/
using System;
using System.Collections.Generic;
using System.Text;
using OpenMobile;
using OpenMobile.Plugin;
using OpenMobile.Controls;
using OpenMobile.Graphics;

namespace OpenMobile
{
    /// <summary>
    /// A zone is a object consisting of one or more Screens and AudioUnits
    /// /// </summary>
    public class Zone
    {
        /// <summary>
        /// Sets the autogenerated state of the zone
        /// <para>Autogenerated makes this zone read only (Audio device can still be changed)</para>
        /// </summary>
        public bool AutoGenerated { get; set; }

        /// <summary>
        /// Sets the master state for the zone
        /// <para>Master means that this is the default zone for the assigned screen</para>
        /// </summary>
        public bool Master { get; set; }

        /// <summary>
        /// Set the subzone state for this zone
        /// <para>False = Allow this zone to be a subzone, True = Don't allow this zone to be a subzone</para>
        /// </summary>
        public bool BlockSubZoneUsage { get; set; }

        private List<int> _SubZones = new List<int>();
        /// <summary>
        /// List of zone's (ID's) that's included in this zone
        /// </summary>
        public List<int> SubZones
        {
            get { return _SubZones; }
            set { _SubZones = value; }
        }

        /// <summary>
        /// Name of the zone
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Description of the zone
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        /// Screen number for this zone
        /// </summary>
        public int Screen { get; set; }

        private string _AudioDeviceName = "";
        /// <summary>
        /// AudioDevice name for this zone 
        /// </summary>
        public string AudioDeviceName 
        {
            get
            {
                if (String.IsNullOrEmpty(_AudioDeviceName))
                    _AudioDeviceName = BuiltInComponents.Host.getAudioDeviceName(_AudioDeviceInstance);
                return _AudioDeviceName;
            }
            set
            {
                if (_AudioDeviceName == value)
                    return;
                _AudioDeviceName = value;
                _AudioDeviceInstance = -999;
            }
        }

        private int _AudioDeviceInstance = -999;
        /// <summary>
        /// AudioDevice instance for this zone 
        /// <para>Returns -1 if no instance is available</para>
        /// </summary>
        public int AudioDeviceInstance
        {
            get
            {
                if (_AudioDeviceInstance == -999)
                {
                    if (!string.IsNullOrEmpty(AudioDeviceName))
                    {
                        _AudioDeviceInstance = BuiltInComponents.Host.getAudioDeviceInstance(AudioDeviceName);
                        return _AudioDeviceInstance;
                    }
                    else
                        return -1;
                }
                else
                {
                    return _AudioDeviceInstance;
                }
            }
            set
            {
                _AudioDeviceInstance = value;
                _AudioDeviceName = BuiltInComponents.Host.getAudioDeviceName(_AudioDeviceInstance);
            }
        }

        /// <summary>
        /// Register a zone as included in this zone (must be uniqe)
        /// </summary>
        /// <param name="zone"></param>
        /// <returns></returns>
        public bool Add(Zone zone)
        {
            // Only add zones that can be subzones
            if (zone.BlockSubZoneUsage)
                return false;

            // See if this zone already exists
            int ZoneCheck = SubZones.Find(a => a == zone.ID);
            if (ZoneCheck != 0)
                return false;   // No, return error

            // New zone, add it
            SubZones.Add(zone.ID);

            // All good, return true
            return true;
        }

        /// <summary>
        /// Create a new zone, specifying the default screen and audiodevice
        /// </summary>
        /// <param name="Name">Name of zone</param>
        /// <param name="Name">Description for zone</param>
        /// <param name="Screen">Main screen</param>
        /// <param name="AudioDevice">Main audio device</param>
        public Zone(string Name, string Description, int Screen, string AudioDevice)
        {
            this.Name = Name;
            this.Description = Description;
            this.Screen = Screen;
            this.AudioDeviceName = AudioDevice;
            ID = String.Format("{0}{1}{2}{3}", Name, Description, Screen, AudioDevice).GetHashCode();
        }
        /// <summary>
        /// Create a new zone, specifying the default screen and audiodevice
        /// </summary>
        /// <param name="Name">Name of zone</param>
        /// <param name="Name">Description for zone</param>
        /// <param name="Screen">Main screen</param>
        /// <param name="AudioDevice">Main audio device</param>
        public Zone(string Name, string Description, int Screen, int AudioInstance)
        {
            this.Name = Name;
            this.Description = Description;
            this.Screen = Screen;
            this.AudioDeviceInstance = AudioInstance;
            ID = String.Format("{0}{1}{2}{3}", Name, Description, Screen, AudioInstance).GetHashCode();
        }

        /// <summary>
        /// Do not use this constructor, included only for serialization
        /// </summary>
        private Zone()
        {
        }

        /// <summary>
        /// ToString
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return ID.ToString();
        }

        /// <summary>
        /// ID for this zone
        /// </summary>
        public int ID { get; set; }

        /// <summary>
        /// Compares two zones by looking at audiodevice and screen
        /// NB! This compare override will return true on ANY match for audiodevice or screen in the zone or any subzones
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public static bool operator ==(Zone a, Zone b)
        {
            // If both are null, or both are same instance, return true.
            if (System.Object.ReferenceEquals(a, b))
            {
                return true;
            }

            // If one is null, but not both, return false.
            if (((object)a == null) || ((object)b == null))
            {
                return false;
            }

            if (a.SubZones.Count > 0 & b.SubZones.Count == 0)
            {
                foreach (int i in a.SubZones)
                {
                    if (BuiltInComponents.Host.ZoneHandler.GetZone(i) == b)
                        return true;                    
                }
                return false;
            }
            else if (a.SubZones.Count == 0 & b.SubZones.Count > 0)
            {
                foreach (int i in b.SubZones)
                {
                    if (BuiltInComponents.Host.ZoneHandler.GetZone(i) == a)
                        return true;
                }
                return false;
            }
            else if (a.SubZones.Count > 0 & b.SubZones.Count > 0)
            {
                foreach (int iA in b.SubZones)
                {
                    foreach (int iB in b.SubZones)
                    {
                        if (BuiltInComponents.Host.ZoneHandler.GetZone(iA) == BuiltInComponents.Host.ZoneHandler.GetZone(iB))
                            return true;
                    }
                }
                return false;
            }
            else
                return ((a.AudioDeviceInstance == b.AudioDeviceInstance) | (a.Screen == b.Screen));
        }
        public static bool operator !=(Zone a, Zone b)
        {
            
            return !(a==b);
        }

        
    }
}
