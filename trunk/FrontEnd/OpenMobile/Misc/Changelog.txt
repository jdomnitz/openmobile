

	~ : OMVLCPlayer : Changed OMVLCPlayer to set the player core based on OM process state (32 or 64bit) rather than using the OS level state.
	~ : DotSpatial.Positioning : Corrected a bug that prevented failed GPS devices to be undetected

20140924
	+ : Added startup argument to control which graphical engine OM uses. Usage: 
		for V1 graphics: -Graphics=V1 
		for V2 graphics: -Graphics=V2
		for ES Graphics: -Graphics=ES

20140804
	~ : Fixed a bug in shader code that caused shaders to be rendered at the wrong place
	~ : Fixed a bug in inputhandler that caused touch screens to misbehave
	~ : Fixed a bug in OMAudioControl that did a lookup on the wrong type of audio connections

20140803
	# Change : Changed AudioControl from CoreAudio back to VistaAudio
	~ Bugfix : Corrected a bug in OMVLCPlayer that caused it to not change the core when a change from 64bit to 32 bit happened
	+ Added  : Added notifications from OMVLCPlayer when installing core since it might take some time on certain setups.


20140802 
	# Added error handling to TagLib ByteVector.Mid method

---- < Distributed >-----
20140802
	+ Added OpenMobile.Resources project which holds the current debug folder structure (Any global resources must be added here)
	# Fixed incorrect image references
	# Updated Shader code to properly adjust to window changes

---- < Distributed >-----
20140801
	# Replaced Mono.Data.SQLite with latest System.Data.SQLite files. Added automatic handling of 64bit vs 32bit installs, no more need for EnvironmentSetup.exe
	- Removed OMWinHal as it's no longer needed. It's functionality will be moved into OM itself over time.

20140731
	Upgraded to .Net4
	+ Added Helper methods for File: OpenMobile.helperFunctions.FileHelpers.ExtractZipFile 
	# Replaced media player plugin OMWinPlayer2 with OMVLCPlayer
	# Changed load level for DLL's from all dll's located below OpenMobile to maximum one level below plugin folder
	  and skin folder. Dll's located lower than this will be skipped from load attempts.
	+ Added new Audio handler plugin OMAudioControl, this renders the old OMPlayer plugin useless. Plugin is removed.

---- < Distributed >-----
20140422
	+ Several changes, including DataSourceGroups and CommandGroups
	+ New Media Player using datasources and commands (old interface not yet removed)
		Please note that the current implementation has no playlist editing/browsing so all songs are automatically loaded into the default 
		playlist the first time the Music Player skin is opened (this might take some time on certain setups) operation has completed when 
		covers are visible in the cover flow.

---- < Distributed, Committed >-----
20140127 
	+ Added support for subscribing to multi-screen datasources (datasources that begins with "Screen") by using this string as a 
	  direct datasource link for a control, notice that even the full name of the datasource is Screen0.Map.Busy we drop the screen part: 
		img_MapGroup_Updating.DataSource = "{:S:}Map.Busy";
	+ Added support for executing a multi-screen command (commands that begins with "Screen") by using this command as a 
	  direct command for a button (and other controls), notice that even the full name of the command is Screen0.Map.Zoom.In we drop the screen part: 
		btn_MapGroup_ZoomIn.Command_Click = "{:S:}Map.Zoom.In";
	+ OMMapProvider: Added some more datasources and commands, see OMWinInfo for details

---- < Distributed >-----
20140124
	+ Separated OMNavigationProvider and OMMaps into one map per screen. Datasources and commands are also on a per screen basis.
	+ Added extra methods to DataHandler and CommandHandler to support calling commands and subscribing to datasources on a per screen basis as well. 
      Also added extra methods for easily adding new commands and datasources on a per screen basis:
		OM.Host.CommandHandler.AddCommand(bool screenSpecific, Command command) 
		OM.Host.DataHandler.AddDataSource(bool screenSpecific, DataSource dataSource)
	
---- < Distributed >-----
20140123
	+ Added misc methods to CommandHandler and DataHandler
	+ Split Navigation into a separate navigation/map provider (OMMapProvider) and a simple skin frontend (OMMaps)
		Use OMWinInfo to see the different commands and datasources exposed by the OMMapProvider plugin. See OMMaps for samples for how to use them.

---- < Distributed >-----
20140119
	+ Support for 9Patch images 
		Info about format here: http://developer.android.com/tools/help/draw9patch.html
		Online editor here: http://android-ui-utils.googlecode.com/hg/asset-studio/dist/nine-patches.html

		Method is found here: OM.Host.getSkinImage("9patchImageName", new Size(100, 100))
		Sample:
			Return a 9patch at the requested size from a file located in the skin folder:
				OM.Host.getSkinImage("9Patch|progress_bar_fill_bg.9", new Size(250, 36));

			Return a 9patch at the requested size from a file located in the plugin folder:
				OM.Host.getPluginImage("9Patch|progress_bar_fill_bg.9", new Size(250, 36));
							

20140118
	+ Support for loading sprite graphics (one large image with several small resource images in it) from skin and plugin folders
		Method is found here: OM.Host.LoadSkinSprite
		Sample:
			Read sprites from file in skin folder into OM's image cache:
				OM.Host.LoadSkinSprite("maneuvers-2x", 
					new Sprite("TurnSharpLeft", 0, 2, 38, 30),
					new Sprite("TurnLeft", 0, 36, 38, 27),
					new Sprite("UTurnRight", 0, 71, 38, 30)
					);

			Load sprites from OM's image cache for usage in a control for a skin image
				OM.Host.getSkinImage("maneuvers-2x", "TurnLeft")


			Read sprites from file in plugin folder into OM's image cache:
				OM.Host.LoadPluginSprite("maneuvers-2x", 
					new Sprite("TurnSharpLeft", 0, 2, 38, 30),
					new Sprite("TurnLeft", 0, 36, 38, 27),
					new Sprite("UTurnRight", 0, 71, 38, 30)
					);

			Load sprites from OM's image cache for usage in a control for a plugin image
				OM.Host.getPluginImage("maneuvers-2x", "TurnLeft")

	
	Legend:
	+ Added
	- Removed
	* Updated/Changed