/*********************************************************************************
    This file is part of Open Mobile.

    Open Mobile is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Open Mobile is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Open Mobile.  If not, see <http://www.gnu.org/licenses/>.
 
    There is one additional restriction when using this framework regardless of modifications to it.
    The About Panel or its contents must be easily accessible by the end users.
    This is to ensure all project contributors are given due credit not only in the source code.
*********************************************************************************/
using System;
using System.Drawing;
using System.IO;
using OpenMobile;
using OpenMobile.Controls;
using OpenMobile.Media;
using OpenMobile.Plugin;

namespace ControlDemo
{
    public class AutoGeneratedClass : IHighLevel
    {
        IPluginHost theHost;
        OMPanel p;
        OMList List3;
        private static string lastPath;
        public eLoadStatus initialize(OpenMobile.Plugin.IPluginHost host)
        {
            theHost = host;
            theHost.OnStorageEvent += new StorageEvent(theHost_OnStorageEvent);
            theHost.OnSystemEvent += new SystemEvent(theHost_OnSystemEvent);
            p = new OMPanel();
            OMImage Image1 = new OMImage(275, 115, 400, 400);
            Image1.Image = theHost.getSkinImage("MediaBorder");
            Image1.Name = "Image1";
            OMLabel Label2 = new OMLabel(430, 150, 250, 40);
            Label2.Format = textFormat.Bold;
            Label2.Name = "Label2";
            Label2.TextAlignment = Alignment.CenterLeft;
            OMImage icon = new OMImage(350, 135, 60, 60);
            List3 = new OMList(286, 200, 378, 290);
            List3.Background = Color.Silver;
            List3.ListStyle = eListStyle.DroidStyleImage;
            List3.ItemColor1 = Color.Black;
            List3.Name = "List3";
            List3.SelectedIndexChanged += new OMList.IndexChangedDelegate(List3_SelectedIndexChanged);
            p.addControl(Image1);
            p.addControl(Label2);
            p.addControl(List3);
            p.addControl(icon);
            return eLoadStatus.LoadSuccessful;
        }

        void theHost_OnSystemEvent(eFunction function, string arg1, string arg2, string arg3)
        {
            if (function == eFunction.promptDialNumber)
            {
                List3.Clear();
                lastPath = arg1;
                ((OMLabel)p[1]).Text = formatNumber(arg1);
                ((OMImage)p[3]).Image=theHost.getSkinImage("Discs|Phone",true);
                imageItem itm = theHost.getSkinImage("Discs|Dial", true);
                List3.Add(new OMListItem("Dial Number", itm.image));
                itm = theHost.getSkinImage("Discs|Add", true);
                List3.Add(new OMListItem("Add To Contacts", itm.image));
                itm = theHost.getSkinImage("Discs|Close", true);
                List3.Add(new OMListItem("Close", itm.image));
                for (int i = 0; i < theHost.ScreenCount; i++)
                {
                    theHost.execute(eFunction.TransitionToPanel, i.ToString(), "OMNotify", "notify");
                    theHost.execute(eFunction.ExecuteTransition, i.ToString(), "SlideDown");
                }
            }
        }

        private string formatNumber(string arg1)
        {
            if (arg1.Contains("-") == true)
                return arg1;
            if (arg1.Length == 10)
                return long.Parse(arg1).ToString("(###) ###-####");
            else if (arg1.Length == 11)
                return long.Parse(arg1).ToString("#-(###) ###-####");
            return arg1;
        }

        void List3_SelectedIndexChanged(OMList sender, int screen)
        {
            if (List3.SelectedIndex < 0)
                return;
            for (int i = 0; i < theHost.ScreenCount; i++)
            {
                theHost.execute(eFunction.TransitionFromPanel,i.ToString(), "OMNotify", "notify");
                theHost.execute(eFunction.ExecuteTransition, i.ToString(), "None");
            }
            switch (List3[List3.SelectedIndex].text)
            {
                case "Play CD":
                    string[] songs=Directory.GetFiles(lastPath);
                    theHost.execute(eFunction.loadAVPlayer, theHost.instanceForScreen(screen).ToString(), "OMPlayer");
                    bool b=theHost.setPlaylist(Playlist.Convert(songs), theHost.instanceForScreen(screen));
                    b=theHost.execute(eFunction.nextMedia, theHost.instanceForScreen(screen).ToString());
                    break;
                case "Eject":
                    theHost.execute(eFunction.ejectDisc, lastPath);
                    break;
                case "View Files":
                    theHost.execute(eFunction.TransitionFromAny, screen.ToString());
                    theHost.execute(eFunction.TransitionToPanel, screen.ToString(), "OMDir", lastPath);
                    theHost.execute(eFunction.ExecuteTransition, screen.ToString(), "None");
                    break;
                case "Dial Number":
                    theHost.execute(eFunction.dialNumber, lastPath);
                    break;
            }
            List3.SelectedIndex = -1;
        }

        void theHost_OnStorageEvent(eMediaType type, string arg)
        {
            lastPath = arg;
            List3.Clear();
            switch (type)
            {
                case eMediaType.NotSet:
                    ((OMLabel)p[1]).Text = "Identifying . . .";
                    ((OMImage)p[3]).Image = new imageItem();
                    break;
                case eMediaType.AudioCD:
                    ((OMLabel)p[1]).Text = "Audio CD";
                    ((OMImage)p[3]).Image=theHost.getSkinImage("Discs|AudioCD",true);
                    imageItem itm = theHost.getSkinImage("Discs|Play", true);
                    List3.Add(new OMListItem("Play CD", itm.image));
                    itm = theHost.getSkinImage("Discs|Rip", true);
                    List3.Add(new OMListItem("Rip CD", itm.image));
                    itm = theHost.getSkinImage("Discs|Eject", true);
                    List3.Add(new OMListItem("Eject", itm.image));
                    itm = theHost.getSkinImage("Discs|Close", true);
                    List3.Add(new OMListItem("Close", itm.image));
                    return;
                case eMediaType.DVD:
                    ((OMLabel)p[1]).Text = "DVD";
                    ((OMImage)p[3]).Image = theHost.getSkinImage("Discs|DVD", true);
                    itm = theHost.getSkinImage("Discs|Play", true);
                    List3.Add(new OMListItem("Play DVD", itm.image));
                    itm = theHost.getSkinImage("Discs|Eject", true);
                    List3.Add(new OMListItem("Eject", itm.image));
                    itm = theHost.getSkinImage("Discs|Close", true);
                    List3.Add(new OMListItem("Close", itm.image));
                    return;
                case eMediaType.HDDVD:
                    ((OMLabel)p[1]).Text = "HDDVD";
                    ((OMImage)p[3]).Image = theHost.getSkinImage("Discs|HDDVD", true);
                    itm = theHost.getSkinImage("Discs|Play", true);
                    List3.Add(new OMListItem("Play HDDVD", itm.image));
                    itm = theHost.getSkinImage("Discs|Eject", true);
                    List3.Add(new OMListItem("Eject", itm.image));
                    itm = theHost.getSkinImage("Discs|Close", true);
                    List3.Add(new OMListItem("Close", itm.image));
                    return;
                case eMediaType.BluRay:
                    ((OMLabel)p[1]).Text = "Blu-Ray";
                    ((OMImage)p[3]).Image = theHost.getSkinImage("Discs|BluRay", true);
                    itm = theHost.getSkinImage("Discs|Play", true);
                    List3.Add(new OMListItem("Play Blu-Ray", itm.image));
                    itm = theHost.getSkinImage("Discs|Eject", true);
                    List3.Add(new OMListItem("Eject", itm.image));
                    itm = theHost.getSkinImage("Discs|Close", true);
                    List3.Add(new OMListItem("Close", itm.image));
                    return;
                case eMediaType.Camera:
                    ((OMLabel)p[1]).Text = "Camera";
                    ((OMImage)p[3]).Image = theHost.getSkinImage("Discs|Camera", true);
                    itm = theHost.getSkinImage("Discs|SlideShow", true);
                    List3.Add(new OMListItem("View Slide Show", itm.image));
                    itm = theHost.getSkinImage("Discs|Add", true);
                    List3.Add(new OMListItem("Copy Photos to Disk", itm.image));
                    itm = theHost.getSkinImage("Discs|Close", true);
                    List3.Add(new OMListItem("Close", itm.image));
                    return;
                case eMediaType.LocalHardware:
                    ((OMLabel)p[1]).Text = "USB Drive";
                    ((OMImage)p[3]).Image = theHost.getSkinImage("Discs|LocalHardware", true);
                    itm = theHost.getSkinImage("Folder", true);
                    List3.Add(new OMListItem("View Files", itm.image));
                    itm = theHost.getSkinImage("Discs|Copy", true);
                    List3.Add(new OMListItem("Copy Files to Disk", itm.image));
                    itm = theHost.getSkinImage("Discs|Close", true);
                    List3.Add(new OMListItem("Close", itm.image));
                    return;
                case eMediaType.iPodiPhone:
                    ((OMLabel)p[1]).Text = "iPod/iPhone";
                    ((OMImage)p[3]).Image = theHost.getSkinImage("Discs|iPodiPhone", true);
                    itm = theHost.getSkinImage("Close", true);
                    List3.Add(new OMListItem("Close", itm.image));
                    return;
            }
            for (int i = 0; i < theHost.ScreenCount; i++)
            {
                theHost.execute(eFunction.TransitionToPanel, i.ToString(), "OMNotify", "notify");
                theHost.execute(eFunction.ExecuteTransition, i.ToString(), "SlideDown");
            }
        }



        public OMPanel loadPanel(string name, int screen)
        {
            if (name=="notify")
                return p;
            return null;
        }

        public OMPanel loadSettings(string name, int screen)
        {
            throw new NotImplementedException();
        }

        public string authorName
        {
            get { return "Justin Domnitz"; }
        }

        public string authorEmail
        {
            get { return ""; }
        }

        public string pluginName
        {
            get { return "OMNotify"; }
        }
        public string displayName
        {
            get { return "Device Notifier"; }
        }
        public float pluginVersion
        {
            get { return 1.0F; }
        }

        public string pluginDescription
        {
            get { return "Displays AutoPlay Dialogs"; }
        }

        public bool incomingMessage(string message, string source)
        {
            throw new NotImplementedException();
        }
        public bool incomingMessage<T>(string message, string source, ref T data)
        {
            throw new NotImplementedException();
        }
        public void Dispose()
        {
            p = null;
        }
    }
}